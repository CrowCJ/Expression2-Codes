@name HeliTest
@inputs  
@outputs P Y R
@persist [Seat Plane]:entity Tick Goo
@trigger 
@strict
@model models/sprops/rectangles/size_3_5/rect_30x60x3.mdl

if (first() | duped()) {
    propSpawnUndo(0)
    enableConstraintUndo(0)
    
    Plane = entity()
    
    Plane:setMass(1)
    Plane:propGravity(0)
    
    function entity:stablized(Angle:angle, MulVector, MulAngVel) {
        TarQ = quat(Angle)
        CurQ = quat(This)    
        Q = TarQ/CurQ     
        V = This:toLocal(rotationVector(Q)+This:pos())
        #Factors 150 and 12 can be adjusted to achieve best effect.
        This:applyTorque((MulVector*V - MulAngVel*This:angVelVector())*This:inertia())
    }
    
    Seat = seatSpawn("models/nova/airboat_seat.mdl", Plane:toWorld(Plane:massCenterL()), Plane:toWorld(ang(0, -90, 0)), 1)
    noCollideAll(Seat, 1)
    #weld(Seat, Plane)
    Seat:parentTo(Plane)
    
    local Y = 20
    local Z = 25
    
    holoCreate(1, Seat:toWorld(vec(0, Y, Z)), vec(1, 1, 1), Seat:toWorld(ang(0, 0, 90)), vec(0, 255, 0), "plane")
    holoCreate(2, Seat:toWorld(vec(1.5, Y, Z)), vec(0.1, 0.01, 1), Seat:toWorld(ang(0, 0, 90)), vec(0, 255, 0), "plane")
    holoCreate(3, Seat:toWorld(vec(-1.5, Y, Z)), vec(0.1, 0.01, 1), Seat:toWorld(ang(0, 0, 90)), vec(0, 255, 0), "plane")
    
    holoCreate(4, Seat:toWorld(vec(0, Y, Z)), vec(0.015, 0.015, 1), Seat:toWorld(ang(0, 0, 90)), vec(0, 255, 0), "cplane")
    holoCreate(5, Seat:toWorld(vec(0, Y, Z)), vec(0.075, 0.075, 1), Seat:toWorld(ang(0, 0, 90)), vec(0, 255, 0), "cplane")
    
    holoAlpha(1, 25)
    holoAlpha(2, 255)
    holoAlpha(3, 255)
    holoAlpha(4, 255)
    holoAlpha(5, 50)
    
    for (I = 1, 5) {
        holoParent(I, Seat)
        holoMaterial(I, "debug/debugdrawflat")
    }
    
    holoParent(2, 5)
    holoParent(3, 5)
    
    holoCreate(6, Plane:toWorld(vec(0, 0, 48)), vec(1, 1, 1), Plane:toWorld(ang(0, 0, 0)), vec(255), "cube")
    holoCreate(7, Plane:toWorld(vec(0, 0, 60)), vec(1, 1, 1), Plane:toWorld(ang(-90, 0, 0)), vec(255), "models/xqm/helicopterrotor.mdl")

    holoCreate(8, Plane:toWorld(vec(-72, 0, 18)), vec(1, 0.1, 7), Plane:toWorld(ang(90, 90, -90)), vec(255), "right_prism")
    
    holoParent(6, Plane)
    holoParent(7, 6)
    holoParent(8, Plane)
    
    holoCreate(9, Plane:pos(), vec())
    holoParent(9, Plane)
    
    Goo = 0
    Tick = 0
    rangerFilter(array(Plane, Seat))
    rangerPersist(1)
}

event tick() {
    local Cur = curtime()
    if (Cur > Tick + 0.05) {
        Tick = Cur
        if (Seat & Seat:driver()) {
            P = vec(0, Seat:driver():eye():dot(Seat:up()), Seat:driver():eye():dot(Seat:up())):z()
            Y = vec(Seat:driver():eye():dot(Seat:right()), Seat:driver():eye():dot(Seat:right()), 0):y()
            R = 0
            
            P = clamp(P, -0.1, 0.1)
            Y = clamp(Y, -0.5, 0.5)
            
            W = Seat:driver():keyForward()
            S = Seat:driver():keyBack()
            A = Seat:driver():keyLeft()
            D = Seat:driver():keyRight()
            
            Go = (P <= 0) ? -P * 5 : -P * 0.5
            
            Goo += clamp(Go - Goo, -0.01, 0.01)
            
            Plane:applyForce((holoEntity(9):forward()) * (Goo) * Plane:mass() * 100)
        } else {
            Goo = 0
            W = 0
            S = 0
            A = 0
            D = 0
            P = 0
            Y = 0
        }
        
        holoAng(6, Plane:toWorld(ang(0, (Tick + Plane:vel():length()/360) * 1800, 0)))
        holoAng(9, ang(0, Plane:angles():yaw(), 0))
        holoPos(4, holoEntity(1):toWorld(vec(Y, P, 0)*2))
        holoAng(5, ang(0, Seat:angles():yaw(), Seat:angles():roll() + 90))
        
        if (P < 0.02 & P > -0.02 & Y < 0.02 & Y > -0.02) {
            holoColor(4, vec(0, 255, 0))
        } else {
            holoColor(4, vec(255, 0, 0))
        }
        
        local Ranger = rangerOffset(1000000, Plane:pos(), vec(0, 0, -1))
        
        local Down = Ranger:distance() > 25
        local Ang = ang(-P, -Y + (A-D)*0.1, Y)
        
        Plane:applyForce((vec(0, 0, (W - S - Down * !Seat:driver()) * 100)-Plane:vel()) * Plane:mass() * 0.1)
        Plane:applyAngForce(Ang * Plane:mass() * 100)
        Plane:applyAngForce((-ang(Plane:angles():pitch(), 0, Plane:angles():roll())*2 - Plane:angVel()) * Plane:inertia():length())
    }
}

