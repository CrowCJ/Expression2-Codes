@name Speakers
@inputs  FFT:array
@outputs 
@persist Table:table N:number 
@trigger 
@strict
@model models/hunter/plates/plate1x1.mdl

if (first() | duped()) {
    entity():setAlpha(0)
    entity():propGravity(0)
    N = 0
    Table = table(
        "speed"  = 20,
        "factor" = 1,
        "z"      = 48,
        "body"   = "models/sprops/cuboids/height48/size_1/cube_48x48x48.mdl",
        "body2"  = "models/sprops/misc/sq_holes/t_sqhole_d0_48.mdl",
        "gasket" = "models/holograms/hq_torus_thin.mdl",
        "drum"   = "models/holograms/hq_hdome_thin.mdl",
        
        "b_mat"  = "sprops/textures/sprops_rubber2",
        "m_mat"  = "sprops/textures/sprops_rubber2",
        
        "b_color" = vec(70),
        "g_color" = vec(200),
        "d_color" = vec(255),
        
        "b_ang_offset"  = ang(0, 0, 0),
        "b_ang_offset2" = ang(0, 90, 0),
        "g_ang_offset"  = ang(-90, 0, 0),
        "g_ang_offset2" = ang(90, 0, 0),
        "d_ang_offset"  = ang(-90, 0, 0),
        "d_ang_offset2" = ang(90, 0, 0)
    )
    
    local Z      = Table["z", number]
    local Factor = Table["factor", number]
    local BColor = Table["b_color", vector]
    local DColor = Table["d_color", vector]
    local GColor = Table["g_color", vector]
    local B_Aoff  = Table["b_ang_offset", angle]
    local B_Aoff2 = Table["b_ang_offset2", angle]
    local G_Aoff  = Table["g_ang_offset", angle]
    local G_Aoff2 = Table["g_ang_offset2", angle]
    local D_Aoff  = Table["d_ang_offset", angle]
    local D_Aoff2 = Table["d_ang_offset2", angle]
    local B_Mat   = Table["b_mat", string]
    local M_Mat   = Table["m_mat", string]
    
    N++, holoCreate(N, entity():toWorld(vec(    0, 0, Z*0.5) * Factor), vec(1) * Factor, entity():toWorld(B_Aoff), BColor, Table["body", string])
    holoClipEnabled(N, 1)
    holoClip(N, vec(Z*0.49, 0, 0), vec(-1, 0, 0), 0)
    N++, holoCreate(N, entity():toWorld(vec(Z*0.5, 0, Z*0.5) * Factor), vec(1) * Factor, entity():toWorld(B_Aoff2), BColor, Table["body2", string])
    
    N++, holoCreate(N, entity():toWorld(vec(Z*0.5, 0, Z*0.5) * Factor), vec(4) * Factor, entity():toWorld(G_Aoff), GColor, Table["gasket", string])
    N++, holoCreate(N, entity():toWorld(vec(Z*0.5, 0, Z*0.5) * Factor), vec(4, 4, 1) * Factor, entity():toWorld(D_Aoff), DColor, Table["drum", string])
    
    N++, holoCreate(N, entity():toWorld(vec(Z*0.4, 0, Z*0.5) * Factor), vec(1.2) * Factor, entity():toWorld(G_Aoff2), GColor, Table["gasket", string])
    N++, holoCreate(N, entity():toWorld(vec(Z*0.4, 0, Z*0.5) * Factor), vec(1.1, 1.1, 0.5) * Factor, entity():toWorld(D_Aoff2), DColor, Table["drum", string])
    
    for (I = 1, N) {
        if (I < 3) {
            holoMaterial(I, B_Mat)
        } else {
            holoMaterial(I, M_Mat)
        }
        holoPos(I, holoEntity(I):pos() - entity():up()*1.5)
        holoParent(I, entity())
    }
    
    FFT = array()
    for (I = 1, 10) {
        FFT:pushNumber(I)
    }
}

event tick() {
    local Factor = Table["factor", number]
#[
    for (I = 1, 10) {
        FFT[I, number] = random(1, 255)
    }
]#
    local Bump1 = 0
    local Bump2 = 0
    if (FFT) {
        Bump1 = (FFT[1, number])/255 * 0.5
        Bump2 = (FFT[10, number])/255 * 0.5
    }
    local Z = Table["z", number]
    local Sped = curtime() * 90 * Table["speed", number]
    for (I = 3, N) {
        if (I <= 4) {
            holoPos(I, entity():toWorld(vec(Z*0.5 * Factor + Bump1 * sin(Sped), 0, Z*0.5 * Factor - 1.5)))
        } else {
            holoPos(I, entity():toWorld(vec(Z*0.4 * Factor + Bump2 * sin(Sped), 0, Z*0.5 * Factor - 1.5)))
        }
    }
}

