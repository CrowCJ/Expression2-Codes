@name music player for a server without starfall
@model models/props_lab/citizenradio.mdl
@inputs  EGP:wirelink User:entity
@persist [MaxListed Nth]:number EGPIDs:table

@persist [Stage Name]:string Songs:table
@persist [PlaylistName FLParse_String]:string FLParse_Pointer:number
@persist Shuffle_SongsCopy:table
@persist WA:webaudio Songs_Shuffled:table [WAFFTAvg Skip Play Volume MAX_VOLUME Radius Shuffle SongIndex]:number
@persist SongRequest:string SR_Itr:number SR_Possible:table
@outputs WA:webaudio Stage:string SongIndex:number Songs:table
@strict

if(duped()){
    reset()
}

function e2Name(Str:string){
    entity():setName("\nby: katsu\n" + Str)
}
    
if(first()){
    #[
        Commands:
        
        !song [playlist songname]
        !songnum [playlist song #]
        !songcustom [url]
        
        !play
        !stop
        !pause
        !volume
        !skip
    ]#
    
    PlaylistName = "playlist.txt"

    Play = 1    
    Shuffle = 1
    Volume = 100
    MAX_VOLUME = 300 #set this to wa_max_volume or else error if you go above 
    Radius = 2000
    
    #end of user settings
    ####################################################################################################################################

    WA = nowebaudio()
    Songs = table()
    Songs_Shuffled = table()
    Shuffle_SongsCopy = table()
    
    SongRequest = ""
    SR_Itr = 0
    SR_Possible = table()
    Skip = 0
    WAFFTAvg = 0
    
    Name = entity():getName()
    local NamePtr = Name:find("\n")
    Name = Name:sub(1,NamePtr-1)
    entity():setName("music player for a server without starfall\nby: katsu\n")
    
    printColor(vec(0,161,255),"Loading playlist...")
    Stage = "loadfile"
    
    holoCreate(0)
    holoPos(0,entity():toWorld(vec(0,0,20)))
    holoAng(0,entity():angles())
    holoScale(0,vec(1,2,0.1))
    holoParent(0,entity())
    
    for(I=1,32){
        holoCreate(I)
        holoPos(I,holoEntity(0):toWorld(vec(0,(I-16.5)*2.5,-50)))
        holoAng(I,holoEntity(0):angles())
        holoScale(I,vec(0.2,0.2,5))
        holoDisableShading(I,1)
        holoParent(I,entity())
        holoClipEnabled(I,1,1)
        holoClip(I,1,vec(0,0,0),vec(0,0,1),holoEntity(0))
    }
    
    #slider bg
    holoCreate(100)
    holoPos(100,holoEntity(0):toWorld(vec(5,0,5)))
    holoAng(100,holoEntity(0):angles())
    holoScale(100,vec(0.1,8,0.1))
    holoParent(100,entity())
    holoDisableShading(100,1)
    
    #song position
    holoCreate(101)
    holoModel(101,"icosphere")
    holoPos(101,holoEntity(100):toWorld(vec(0,-48,0)))
    holoAng(101,holoEntity(100):angles())
    holoScale(101,vec(0.4))
    holoParent(101,100)
    holoDisableShading(101,1)
    
    holoCreate(102)
    holoModel(102,"hq_sphere")
    holoPos(102,holoEntity(101):toWorld(vec(0,0,0)))
    holoAng(102,holoEntity(101):angles())
    holoScale(102,vec(-0.5))
    holoParent(102,101)
    holoDisableShading(102,1)
    
    #slider fg
    holoCreate(103)
    holoPos(103,holoEntity(100):toWorld(vec(0,0,0)))
    holoAng(103,holoEntity(100):angles())
    holoScale(103,vec(0.2,8,0.2))
    holoParent(103,entity())
    holoClipEnabled(103,1,1)
    holoClip(103,1,vec(0,0,0),vec(0,-1,0),holoEntity(101))
    holoDisableShading(103,1)
}

if (first() | ~EGP) {
    Nth = 0
    EGPIDs = table()
    MaxListed = 7
    if (->EGP) {
        EGP:egpClear()
        EGP:egpDrawTopLeft(1)
        
        for (I = 1, MaxListed) {
            Nth++
            EGP:egpRoundedBoxOutline(Nth, vec2(6, (480/MaxListed) * (I-1)), vec2(400, 18))
        }
    }
}

function number wirelink:isButton(Index:number){
    return This:egpObjectContainsPoint(Index, This:egpCursor(User)) ? 1 : 0
}

function newSong(ChosenIndex:number,DoShuffle:number){
    local SongName = DoShuffle ? Songs_Shuffled[ChosenIndex,table]["SongName",string] : Songs[ChosenIndex,table]["SongName",string]
    local URL = DoShuffle ? Songs_Shuffled[ChosenIndex,table]["URL",string] : Songs[ChosenIndex,table]["URL",string]

    if(webAudioCanCreate(URL)){
        printColor(vec(0,161,255),"Now playing:",vec(255,255,255)," [" + SongName + "]")
        e2Name(" \nNow playing:\n"+SongName)
        
        WA:destroy()
        WA = webAudio(URL)
        WA:setParent(entity())
        WA:setVolume(Volume)
        WA:setRadius(Radius)
        WA:play()
    }else{
        printColor(vec(255,0,0),"SONG [" + SongName + "] HAS UNUSABLE URL [" + URL + "]")
        printColor(vec(255,0,0),"Stopping playback to prevent filehost request traffic spam. (this makes them ban you!!)")
        
        Play = 0
        e2Name("")
        if(WA:isValid()){
            WA:destroy()
            printColor(vec(0,161,255),"Music stopped.")
        }            
    }
}

function reshuffle(){
    printColor(vec(0,161,255),"Shuffling songs...")
    Songs_Shuffled = table()
    Stage = "cloneSongs"
}
    
event fileLoaded(F:string, D:string){
    if(F == PlaylistName){
        FLParse_String = D
        FLParse_Pointer = 0
    
        Stage = "parse_filedata"
    }
}

event fileErrored(F:string, E:number){
    if(F == PlaylistName){
        switch(E){
            case _FILE_404,
                printColor(vec(255,0,0),"PLAYLIST FILE NOT FOUND")
            break
            
            default,
                printColor(vec(255,0,0),"FILELOAD ERR [" + E + "]")
            break
        }
    }
}

event tick(){
    switch(Stage){
        case "loadfile",
            if(fileCanLoad() & !fileLoading()){
                fileLoad(PlaylistName)
            }
        break
        
        case "parse_filedata",
            while(perf(80)){
                local NewSongData_EndPointer = FLParse_String:find("\n", FLParse_Pointer)
                local ListEnd = (NewSongData_EndPointer == 0)
                
                if(ListEnd){ #list end reached
                    NewSongData_EndPointer = FLParse_String:length()
                    printColor(vec(0,161,255),"Playlist loaded successfully.")
                    
                    SongIndex = 1
                    reshuffle()
                }
                         
                local NewSongData = FLParse_String:sub(FLParse_Pointer,NewSongData_EndPointer)
                local DataExpTab = NewSongData:explode(",")
                local URL = DataExpTab[1,string]:trim()

                if(URL:sub(1,8) != "https://"){
                    printColor(vec(255,0,0),"INVALID URL AFTER SONG " + Songs:count())
                }elseif(!DataExpTab:exists(2)){
                    printColor(vec(255,0,0),"MISSING SONGNAME AFTER SONG " + Songs:count())
                }else{
                    local SongName = DataExpTab[2,string]:trim()
                    
                    local NewSong = table()
                    NewSong["SongName",string] = SongName
                    NewSong["URL",string] = URL:replace("www.dropbox.com","dl.dropboxusercontent.com"):replace("?dl=0","?dl=1")
                    Songs:pushTable(NewSong)
                }
                
                FLParse_Pointer = NewSongData_EndPointer + 1
                
                if(ListEnd){
                    break
                }
            }
        break
        
        case "cloneSongs",
            while(perf(80)){
                local SSC = Shuffle_SongsCopy:count()
                if(SSC < Songs:count()){
                    Shuffle_SongsCopy[SSC+1,table] = Songs[SSC+1,table]
                }else{
                    Stage = "shuffle"
                    break   
                }
            }
        break
        
        case "shuffle",
            while(perf(80)){
                if(Songs_Shuffled:count() < Songs:count()){
                    local RandIndex = randint(1,Shuffle_SongsCopy:count())
                    Songs_Shuffled:pushTable(Shuffle_SongsCopy[RandIndex,table])
                    Shuffle_SongsCopy:remove(RandIndex)
                }else{
                    printColor(vec(0,161,255),"Playlist shuffled.")
                    Stage = "ready"
                    break
                }
            }
        break
        
        case "ready",
            local WA_Valid = WA:isValid()
            
            if(Play){
                if((Skip | !WA_Valid | (WA_Valid & WA:getState() == _CHANNEL_STOPPED)) & webAudioCanCreate()){ #time for new song
                    Skip = 0
                    SongIndex = SongIndex + 1
                    if(SongIndex >= Songs:count()){
                        SongIndex = 1
                        reshuffle()
                    }
    
                    newSong(SongIndex,Shuffle)
                }
                
                if(changed(floor(systime()*15))){
                    local FFT = WA:getFFT()
                    for(I=1,32){
                        local HoloFFTVal = 0
                        for(J=1,2){
                            local CurrVal = FFT[I*J,number]
                            if(CurrVal > HoloFFTVal){
                                HoloFFTVal = CurrVal
                            }
                        }
                        WAFFTAvg += HoloFFTVal
                        HoloFFTVal = HoloFFTVal/255
                        holoPos(I,holoEntity(0):toWorld(vec(0,(I-16.5)*3,-28+(HoloFFTVal)*50)))
                        holoColor(I,hsv2rgb(180+angnorm(HoloFFTVal*200+systime()*20),0.9,1))
                    }
                    holoPos(101,holoEntity(100):toWorld(vec(0,-48+96*clamp(WA:getTime()/WA:getLength(),0,1),0)))
                    
                    local Ang = angnorm(WAFFTAvg/100 + systime()*5)
                    local BarColor = hsv2rgb(Ang,0.9,1)
                    holoColor(102,BarColor)
                    holoColor(103,BarColor)
                    
                    holoAng(100,holoEntity(0):toWorld(ang(Ang,0,0)))
                    holoAng(103,holoEntity(0):toWorld(ang(-Ang,0,0)))
                }
            }
        break
        
        case "song_request",
            while(perf(80)){
                if(SR_Itr < Songs:count()){
                    SR_Itr = SR_Itr + 1
                    local SongName = Songs[SR_Itr,table]["SongName",string]

                    if(SongName:lower():find(SongRequest)){
                        SR_Possible:pushNumber(SR_Itr)
                    }
                }else{
                    if(SR_Possible:count() >= 2){
                        printColor(vec(0,161,255),"Multiple songs found, please specify further: ")
                        for(I=1,SR_Possible:count()){
                            printColor(vec(0,161,255),"[" + I + "] ",vec(255,255,255),Songs[SR_Possible[I,number],table]["SongName",string])
                        }
                        Stage = "ready"
                    }elseif(SR_Possible:count() == 1){
                        printColor(vec(0,161,255),"Found song.")
                        Stage = "song_request_awaitaudio"
                    }else{
                        printColor(vec(255,0,0),"No matches found.")
                        Stage = "ready"
                    }
                    break
                }
            }
        break
        
        case "song_request_awaitaudio",
            if(webAudioCanCreate()){
                newSong(SR_Possible[1,number],0)
                Stage = "ready"
            }
        break
    }
}

event chat(P:entity, M:string, _:number) {
    if(P == owner() | P:isSteamFriend(owner())){
        local CommandEnd = M:find(" ")
        
        switch(M:sub(1,CommandEnd-1)){
            case "!volume",
                hideChat(1)
                Volume = clamp(M:sub(8):toNumber(),0,300)
                WA:setVolume(MAX_VOLUME)
                WA:update()
                
                printColor(vec(0,161,255),"Volume: %" + Volume)
            break
                            
            case "!song",
                hideChat(1)
                SongRequest = M:sub(7):lower():trim()
                
                SR_Itr = 0
                SR_Possible = table()
                
                printColor(vec(0,161,255),"Searching songlist...")
    
                Stage = "song_request"
            break
            
            case "!songnum",
                hideChat(1)
                local SongNum = M:sub(9):toNumber()
                
                if(SongNum != 0 & SongNum <= Songs:count()){
                    newSong(SongNum,0)
                }else{
                    printColor(vec(255,0,0),"Invalid song index.")
                }
            break
            
            case "!songcustom",
                hideChat(1)
                local URL = M:sub(13):replace("www.dropbox.com","dl.dropboxusercontent.com"):replace("?dl=0","?dl=1")
                
                if(webAudioCanCreate(URL)){
                    printColor(vec(0,161,255),"Now playing:",vec(255,255,255)," [CUSTOM SONG]")
                    e2Name(" \nNow playing:\n"+URL)
                    
                    WA:destroy()
                    WA = webAudio(URL)
                    WA:setParent(entity())
                    WA:setVolume(Volume)
                    WA:setRadius(Radius)
                    WA:play()
                }else{
                    printColor(vec(255,0,0),"SONG HAS UNUSABLE URL [" + URL + "]")
                }
            break
            
            case "!play",
                hideChat(1)

                Play = 1
                if(WA:isValid() & WA:getState() == _CHANNEL_PAUSED){
                    printColor(vec(0,161,255),"Music resumed.")
                    WA:play()
                }
            break
                            
            case "!pause",
                hideChat(1)
                
                local WAState = WA:getState()
                switch(WAState){
                    case _CHANNEL_PLAYING,
                        WA:pause()
                        printColor(vec(0,161,255),"Music paused.")
                    break
                    
                    case _CHANNEL_STOPPED,
                        printColor(vec(255,0,0),"Cannot pause or resume. Player is currently stopped.")
                    break
                }
            break
            
            case "!stop",
                hideChat(1)

                Play = 0
                e2Name("")
                if(WA:isValid()){
                    WA:destroy()
                    printColor(vec(0,161,255),"Music stopped.")
                }
            break
            
            case "!skip",
                hideChat(1)

                Skip = 1
            break
        }
    }
}

#by katsu for my friends for free
#aug 4, 2024
