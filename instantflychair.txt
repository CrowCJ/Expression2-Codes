@name InstantFlyChair
@inputs  [Chair2 Chair3]:entity
@outputs 
@persist Chair:entity Tick Mul FollowMode Target:entity
@trigger 
@strict

if (first() | duped()) {
    Chair = entity():isWeldedTo() ? entity():isWeldedTo() : noentity()

    if (Chair:isValid()) {
        Chair:applyForce(vec(0, 0, 1)*Chair:mass()*20)
        Chair:propPhysicalMaterial("ice")
        Chair:setMass(1000)
        Chair:propSetFriction(0)
        Chair:propDrag(0)
        entity():setMass(0)
        entity():setAlpha(0)
        entity():parentTo(Chair)
    } else {
        hint("Spawn This E2 on a Chair!", 3)
        selfDestruct()
    }
    
    function entity:angVelRes(AngMul:number, AngVelMul:number) {
        local Angle  = This:angles()
        local AngVel = This:angVel()
        local AngForce = (-Angle*AngMul-AngVel*AngVelMul)*This:inertia():length()
        
        This:applyAngForce(AngForce)
    }
    
    function entity:stablized(Angle:angle, MulVector, MulAngVel) {
        TarQ = quat(Angle)
        CurQ = quat(This)    
        Q = TarQ/CurQ     
        V = This:toLocal(rotationVector(Q)+This:pos())
        #Factors 150 and 12 can be adjusted to achieve best effect.
        This:applyTorque((MulVector*V - MulAngVel*This:angVelVector())*This:inertia())
    }
    
    function entity:moveTo(Pos:vector) {
        local EntPos = This:pos()
        local DesPos = Pos
        local Fin = DesPos - EntPos
        local Mass = This:mass()
        
        This:applyForce((Fin*2 - This:vel()*0.15)*Mass)
    }
    
    rangerHitWater(1)
    rangerHitEntities(1)
    rangerFilter(Chair)
    rangerPersist(1)
    
    runOnTick(1)
    
    holoCreate(1, Chair:toWorld(vec(0, 0, 0)), vec(1))
    holoModel(1, "hq_icosphere")
    holoParent(1, Chair)
    
    holoCreate(2, holoEntity(1):toWorld(vec()), vec(2))
    holoModel(2, "hq_icosphere")
    holoMaterial(2, "models/wireframe")
    holoParent(2, 1)
    
    holoCreate(3, holoEntity(1):toWorld(vec(0,-6*10, 0)), vec(2, 10, 0.1))
    holoModel(3, "cube")
    holoMaterial(3, "models/debug/debugwhite")
    holoParent(3, 1)
    
    holoCreate(4, holoEntity(1):toWorld(vec(0, 6*10, 0)), vec(2, 10, 0.1))
    holoModel(4, "cube")
    holoMaterial(4, "models/debug/debugwhite")
    holoParent(4, 1)
    
    holoCreate(5, holoEntity(1):toWorld(vec(-108, 0, -6*3)), vec(2, 0.1, 3))
    holoModel(5, "cube")
    holoMaterial(5, "models/debug/debugwhite")
    holoParent(5, 1)
    
    holoCreate(6, holoEntity(1):toWorld(vec(-108, -6*3, 0)), vec(2, 3, 0.1))
    holoModel(6, "cube")
    holoMaterial(6, "models/debug/debugwhite")
    holoParent(6, 1)
    
    holoCreate(7, holoEntity(1):toWorld(vec(-108, 6*3, 0)), vec(2, 3, 0.1))
    holoModel(7, "cube")
    holoMaterial(7, "models/debug/debugwhite")
    holoParent(7, 1)
    
    holoCreate(8, holoEntity(1):toWorld(vec(-108/2, 0, 0)), vec(0.5, 0.5, 10))
    holoAng(8, holoEntity(1):toWorld(ang(90, 0, 0)))
    holoModel(8, "hq_cylinder")
    holoMaterial(8, "models/debug/debugwhite")
    holoParent(8, 1)
    
    Mul = 40
    
    FollowMode = 0
    Target = findPlayerByName("Mon")
}

if (tickClk()) {
    Tick++
}
 
if (Tick%2 == 0) {
    if (Chair & (!FollowMode || !Target:isValid())) {
        holoAng(1, ang(0, Chair:angles():yaw()+90, 0))
        if (Chair:driver()) {
            Driver = Chair:driver()
            W = Driver:keyForward()
            A = Driver:keyLeft()
            S = Driver:keyBack()
            D = Driver:keyRight()
            Shift = Driver:keySprint()
            Space = Driver:keyJump()
            Down  = Driver:keyWalk()
        }
        
        Boost = 1 + Shift*Mul
        Yaw = (A - D)*2 * (1 + Shift)
        Roll = (Chair:vel():length() > 100) ? Yaw : 0
        Forward = holoEntity(1):forward() * (W - S) * Mul
        Right   = -holoEntity(1):right()   * (A - D) * Mul
        Up      = holoEntity(1):up()      * (Space - Down*0.1) * Mul
        
        Ranger = rangerOffset(1000, Chair:pos(), vec(0, 0, -1))

        Pos = Ranger:pos() + vec(0, 0, 75 - !Chair:driver()*30)
        Dis = Ranger:distance()
        
        if (Dis < 100) {
            Chair:moveTo(Pos)
            Chair:applyForce((Forward * Boost + Up)*Chair:mass())
            Chair:applyAngForce(ang(Yaw, Yaw * 25, Roll * -50)*Chair:mass())
        }
        holoAng(2, holoEntity(1):toWorld(ang(curtime()*(W-S)*(Chair:vel():length()/100), 0, 0)))
        Chair:stablized(ang(0, Chair:angles():yaw(), 0), 50, 15)
    }
    elseif (Chair & FollowMode & Target:isValid()) {
        holoAng(1, Chair:angles() + ang(0, 90, 180))
        Pos = Target:pos() + (Target:right() + Target:forward())*vec(-50, -50, 0) + vec(0, 0, 50)
        Chair:moveTo(Pos)
        if (Target:inVehicle()) {
            Chair:stablized(Target:vehicle():angles(), 50, 15)
        } else {
            Chair:stablized(ang(0, Target:angles():yaw()-90, 0), 50, 15)
        }
    }
    
    if (Chair) {
        R = holoEntity(1):angles():roll()
        P = holoEntity(1):angles():pitch()
        holoAng(3, holoEntity(1):toWorld(ang(R, 0, 0)))
        holoAng(4, holoEntity(1):toWorld(ang(-R, 0, 0)))
        holoAng(5, holoEntity(1):toWorld(ang(0, Chair:angVel():yaw()*0.25, 0)))
        holoAng(6, holoEntity(1):toWorld(ang(Chair:angVel():roll()*0.5, 0, 0)))
        holoAng(7, holoEntity(1):toWorld(ang(Chair:angVel():roll()*0.5, 0, 0)))
    }
    
    if (Chair2) {
        Chair2:moveTo(Chair:pos() + Chair:vel()*tickInterval() + -Chair:right() * vec(100, 100, 0))
        Chair2:stablized(Chair:angles(), 150, 15)
    }
    
    if (Chair3) {
        Chair3:moveTo(Chair:pos() + Chair:vel()*tickInterval() + Chair:right() * vec(100, 100, 0))
        Chair3:stablized(Chair:angles(), 150, 15)
    }
}
