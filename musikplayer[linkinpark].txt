@name MusikPlayer[LinkinPark]
@inputs  EGP:wirelink [User Emitter]:entity
@outputs FFT:array
@persist [MusicData SongList]:table WebAudio:webaudio Down Page
@trigger 
@strict

if (first() | duped() | ~EGP) {
    WebAudio = nowebaudio()

    MusicData = table(
        "tick"      = 0,
        "Cooldown"  = 0.3,
        "Loop"      = 1,
        "Volume"    = 200,
        "Radius"    = 1000,
        "MaxListed" = 10,
        "CurPage"   = 1,
        "CurSong"   = 0,
        "CurURL"    = "",
        "MaxSong"   = 0
    )
    
    Page = MusicData["CurPage", number]
    Down = 0

    SongList = table(
        array("https://dl.dropbox.com/scl/fi/bhzfzirqw3mvi2ex0ptu1/Numb_LinkinPark.mp3?rlkey=e88kfiycr8uolfgmdslnlco2g&dl=1", "Numb"),
        array("https://dl.dropbox.com/scl/fi/cj9n567mnjoktxiur2idp/InTheEnd_LinkinPark.mp3?rlkey=mthypcw1bh7yw9tz3cii6oexh&dl=1", "In The End"),
        array("https://dl.dropbox.com/s/ioc9ybz85cibutc/iridescentlinkinpark.mp3?dl=1", "Iridescent"),
        array("https://dl.dropbox.com/s/eyiwch1s81os9gl/onemorelightlinkinpark.mp3?dl=1", "One More Light"),
        array("https://dl.dropbox.com/scl/fi/0b5j0465saw0siiunneqc/WhatIveDone.mp3?rlkey=gqj0azsjvxnnahfpgrzkmz3na&st=fx7dx4ka&dl=1", "What I've Done"),
        array("https://dl.dropbox.com/s/t03pr4ffk4nh2v7/CastleofGlassLinkinpark.mp3?dl=1", "Castle Of Glass"),
        array("https://dl.dropbox.com/scl/fi/vccgy2ch8433s6lrt9zyb/BleedItOut.mp3?rlkey=hn591apougt96953rn44jn79l&st=ljwye4hy&dl=1", "Bleed It Out"),
        array("https://dl.dropbox.com/s/b843r3mq3mmlhgr/Faint-LinkinPark.mp3?dl=1", "Faint"),
        array("https://dl.dropbox.com/scl/fi/u0qgo22odo94ujp3dnib8/APlaceForMyHeadLinkinPark.mp3?rlkey=0c1l8ahpez07id3o4t4aft9hi&st=du128sc2&dl=1", "A Place For My Head"),
        array("https://dl.dropbox.com/scl/fi/7ydqzkqrpga09e6ucp84k/DontStayLinkinPark.mp3?rlkey=8sth8zp44afxr1j9f2iul19mt&st=hw52qt8x&dl=1", "Don't Stay"),
        array("https://dl.dropbox.com/scl/fi/2ytiwyhwtrjx7kjcv0bkh/BreakingtheHabitLinkinPark.mp3?rlkey=wnfmcy4x5z1d9uihgjf0rv4ds&st=laamf17u&dl=1", "Breaking The Habit"),
        array("https://dl.dropbox.com/scl/fi/uzs07ksm6bj3yhrhwknwj/LeaveOutAllTheRest.mp3?rlkey=78bcl2jxzxowy1fay8ppa2ptr&st=wrmk33oy&dl=1", "Leave Out All The Rest"),
        array("https://dl.dropbox.com/scl/fi/qlddzrq9sfd314rldk4sr/OneStepCloser.mp3?rlkey=q56xdr9tt6tpe2qk2r29v37zs&st=5u4gf7hd&dl=1", "One Step Closer"),
        array("https://dl.dropbox.com/scl/fi/v3lp7r9b19459op629k8b/Figure09LinkinPark.mp3?rlkey=cxi2iq8sqtp5zsm37u0z0fhtz&st=ggv4u9kn&dl=1", "Figure09"),
        array("https://dl.dropbox.com/scl/fi/3s19uxv8ezasy4tltc887/PointsOfAuthorityLinkinPark.mp3?rlkey=wd5veg4cxjhetmzr2te8kjasr&st=26678hkq&dl=1", "Points Of Authority"),
        array("https://dl.dropbox.com/scl/fi/tab9oqe26wtwvyfyyon9g/Crawling.mp3?rlkey=hioqucm22tck53287wmn69s1h&st=vx3ezhug&dl=1", "Crawling"),
        array("https://dl.dropbox.com/scl/fi/rs2flyiw2jn21os1arofl/Papercut.mp3?rlkey=6qbqqoietesfrnc2c3iiin1yx&st=1vnt28te&dl=1", "Papercut"),   
        array("https://dl.dropbox.com/scl/fi/mq5dl9u2vyhhlq13btsuo/TheCatalystLinkinPark.mp3?rlkey=vnf1hdzd40a7dapmj916c4jer&st=wj3frt43&dl=1", "The Catalyst"),
        array("https://dl.dropbox.com/scl/fi/zorase2c2lhskchx0th8v/NoMoreSorrow.mp3?rlkey=ery4zfchc409nsx0wxfsjk6ld&st=9qpy9ear&dl=1", "No More Sorrow"),
        array("https://dl.dropbox.com/scl/fi/gqayoyby2nhrx6bzrokfn/GivenUp.mp3?rlkey=1kesolb9isku0bttx0p1zbbd8&st=pnyuawok&dl=1", "Given Up"),
        array("https://dl.dropbox.com/s/n1oz8dxni5h0feh/InTheEndMellenGi.mp3?dl=1", "In The End(Mellen Gi Mix)")
    )
    
    MusicData["MaxSong", number] = SongList:count()

    local MaxPage = ceil(MusicData["MaxSong", number]/MusicData["MaxListed", number])
    MusicData["MaxPage", number] = MaxPage

    if (EGP) {
        holoCreate(1, EGP:entity():toWorld(vec(-50, 0, 0)), vec(1, 15, 1), EGP:entity():toWorld(ang(-90, 0, 0)), vec4(255, 255, 255, 0), "models/gman_high.mdl")
        
        EGP:egpClear()
        EGP:egpDrawTopLeft(1)
        
        #W = 512
        H = 512

        # Title #
        local Title = format("%s's Linkin Park Station", owner():name())
        EGP:egpText(100, Title, vec2(512/2 - (Title:length()*8)/2, 3))

        # List Buttons #
        local MaxListed = MusicData["MaxListed", number]
        local B_ListSize = vec2(512 - 64, 256/MaxListed - 0.6)
        
        local Page = 1 # Debug
        for (I = 1, MaxListed)
        {
            local Name   = ""
            local String = ""
            local ID = I + (Page - 1) * MaxListed

            if (SongList[ID, array][2, string]) {
                Name = SongList[ID, array][2, string]
                String = format("%02d. %s", ID, Name)
            } else {
                String = ""
            }

            local X_Align = 4
            local Y_Align = ((ceil(H/B_ListSize:y()) + 6)) * (I - 1) + 32

            EGP:egpBoxOutline(I, vec2(X_Align, Y_Align), B_ListSize)
            EGP:egpSize(I, 2)
            EGP:egpTextLayout(I + MaxListed, String, EGP:egpPos(I) + vec2(6, 6), EGP:egpPos(I) + vec2(512-6, 2))
            EGP:egpSize(I + MaxListed, 12)

            MusicData["bListID" + I, number] = I
        }

        # Page Buttons #
        EGP:egpBoxOutline(40, vec2(512-64 + 16, 64), vec2(32, 64))
        EGP:egpSize(40, 2)
        EGP:egpBoxOutline(41, vec2(512-64 + 16, 128 + 72), vec2(32, 64))
        EGP:egpSize(41, 2)

        local MidPoint = (EGP:egpPos(40) + EGP:egpSize(40)/2 + EGP:egpPos(41) + EGP:egpSize(41)/2)/2
        EGP:egpText(42, "<#>" ,vec2(512 - 64 + 32, MidPoint:y()))
        EGP:egpAlign(42, 1, 1)
        EGP:egpSize(42, 25)

        # Song Info #
        EGP:egpText(45, "<Song Name>", vec2(3, 400 - 64))
        EGP:egpSize(45, 25)
        EGP:egpText(46, "00:00", vec2(3, 400 - 32))
        EGP:egpSize(46, 20)
        EGP:egpText(47, "00:00", vec2(512 - 50, 400 - 32))
        EGP:egpSize(47, 20)

        # Progress Bar #
        EGP:egpBoxOutline(50, vec2(0, 400), vec2(512, 8))
        EGP:egpRoundedBox(51, vec2(0, 400), vec2(512, 8))
        
        # Pointer #
        EGP:egpCircle(52, vec2(256, 400 + EGP:egpSize(51):y()/2), vec2(10))

        # Navigation Buttons #
        local NavButtonSize = vec2(64, 32)
        EGP:egpBoxOutline(53, vec2(256 - 128, 400 + 36), NavButtonSize)
        EGP:egpSize(53, 2)

        local GetX = EGP:egpPos(53):x()
        EGP:egpBoxOutline(54, vec2(128 + NavButtonSize:x() + GetX, 400 + 36), NavButtonSize)
        EGP:egpSize(54, 2)

        local MidPoint2 = (EGP:egpPos(53) + EGP:egpPos(54))/2
        EGP:egpBoxOutline(55, MidPoint2, NavButtonSize)
        EGP:egpSize(55, 2)

        # Icon #
        EGP:egpTriangle(153, vec2(256 - 128 + 16, 436 + 16), vec2(256 - 128 + 48, 436 + 6), vec2(256 - 128 + 48, 436 + 26))
        EGP:egpTriangle(154, vec2(256 + 128 - 16, 436 + 16), vec2(256 + 128 - 48, 436 + 6), vec2(256 + 128 - 48, 436 + 26))
        EGP:egpBox(155, vec2(256 - 16, 436 + 6), vec2(8, 18))
        EGP:egpBox(156, vec2(256 + 08, 436 + 6), vec2(8, 18))

        EGP:egpBoxOutline(56, vec2(003, 512 - 36), vec2(48, 24))
        EGP:egpSize(56, 2)
        EGP:egpBoxOutline(57, vec2(128, 512 - 36), vec2(48, 24))
        EGP:egpSize(57, 2)

        local MidPoint3 = (EGP:egpPos(56) + EGP:egpSize(56)/2 + EGP:egpPos(57) + EGP:egpSize(57)/2)/2
        EGP:egpText(58, "Vol", MidPoint3)
        EGP:egpAlign(58, 1, 1)
        EGP:egpSize(58, 20)

        MusicData["Page-", number]       = 40
        MusicData["Page+", number]       = 41
        MusicData["Page",  number]       = 42
        MusicData["NameID", number]      = 45
        MusicData["TimeID", number]      = 46
        MusicData["LengthID", number]    = 47
        MusicData["ProgBar", number]     = 50
        MusicData["RunBar", number]      = 51
        MusicData["PointerID", number]   = 52
        MusicData["Song-", number]       = 53
        MusicData["PlayPause", number]   = 55
        MusicData["Song+", number]       = 54
        MusicData["Vol-", number]        = 56
        MusicData["Vol+", number]        = 57
        MusicData["VolID", number]       = 58
        EGP:egpSetText(MusicData["Page", number], format("%02d", MusicData["CurPage", number]))

        # Cursor #
        EGP:egpCircle(70, vec2(0, 0), vec2(4))
        EGP:egpColor(70, vec(255))
        #EGP:egpSize(70, 5)
        EGP:egpParentToCursor(70)
    }
}

#[
function number wirelink:isButton(Index:number) {
    local Cursor = This:egpCursor(User)
    local Yes = inrange(Cursor, EGP:egpPos(Index), EGP:egpPos(Index) + EGP:egpSize(Index))
    return Yes
}
]#

function number wirelink:isButton(Index:number){
    return This:egpObjectContainsPoint(Index, This:egpCursor(User)) ? 1 : 0
}

function playSong(Url:string, Volume:number, Radius:number) {
    if (Url != "") {
        if (WebAudio:isValid()) { WebAudio:destroy() }
        
        Url = Url:replace("www.dropbox.com", "dl.dropbox.com")
        Url = Url:replace("dl=0", "dl=1")
        
        if (webAudioCanCreate()) {
            WebAudio = webAudio(Url)
            if (!Emitter) {
                WebAudio:setPos(EGP:entity():pos())
                WebAudio:setParent(EGP:entity())
            } else {
                WebAudio:setPos(Emitter:pos())
                WebAudio:setParent(Emitter)
            }

            FFT = array()
            WebAudio:setVolume(Volume)
            WebAudio:setRadius(Radius)
            WebAudio:play()

            local Wide = "https://dl.dropbox.com/s/6zp8pem86nl888n/Song%20for%20Denise%20%28Maxi%20Version%29%20bass%20boosted.mp3?dl=1"
            if (Url == Wide) { holoAlpha(1, 255) }
            else { holoAlpha(1, 0) }
        }
    }
}

function pageChanged() {
    local MaxListed = MusicData["MaxListed", number]
    EGP:egpSetText(MusicData["Page", number], format("%02d", MusicData["CurPage", number]))

    for (I = 1, MusicData["MaxListed", number]) {
        local Name = format("%02d. %s", I + (MusicData["CurPage", number] - 1) * MaxListed, SongList[I + (MusicData["CurPage", number] - 1) * MaxListed, array][2, string])
        EGP:egpSetText(MusicData["bListID" + I, number] + MusicData["MaxListed", number], Name)
    }
}

const ProgBar    = MusicData["ProgBar", number]
const PrevPageID = MusicData["Page-", number]
const NextPageID = MusicData["Page+", number]
const VolumeUpID = MusicData["Vol+", number]
const VolumeDwID = MusicData["Vol-", number]
const PrevSong = MusicData["Song-", number]
const NextSong = MusicData["Song+", number]
const PlayPaus = MusicData["PlayPause", number]
const VolumeID = MusicData["VolID", number]
const MaxPage  = MusicData["MaxPage", number]
const Cooldown = MusicData["Cooldown", number] * 1000

event tick() {
    local Curtick = curtime()
    local Tick = MusicData["tick", number]

    if (WebAudio:isValid()) { FFT = WebAudio:getFFT() }
    else { FFT = array() }

    if (Curtick > Tick + 0.3) {
        MusicData["tick", number] = Curtick

        if (WebAudio:isValid()) {
            Time   = WebAudio:getTime()
            Length = WebAudio:getLength()

            if (Length > 0 & Time >= Length - 0.3) {
                MusicData["CurSong", number] = MusicData["CurSong", number] + 1

                if (MusicData["Loop", number] == 1) {
                    if (MusicData["CurSong", number] > MusicData["MaxSong", number]) {
                        MusicData["CurSong", number] = 1
                    }
                } else {
                    MusicData["CurSong", number] = clamp(MusicData["CurSong", number], 1, MusicData["MaxSong", number])
                }

                local Name = SongList[MusicData["CurSong", number], array][2, string]
                local Url  = SongList[MusicData["CurSong", number], array][1, string]
                MusicData["CurURL", string] = Url

                EGP:egpSetText(MusicData["NameID", number], Name)
                playSong(Url, MusicData["Volume", number], MusicData["Radius", number])
            }

            EGP:egpPos(MusicData["PointerID", number], vec2(Time/Length * 512, 400 + EGP:egpSize(51):y()/2))
            EGP:egpSize(MusicData["RunBar", number], vec2(Time/Length * 512, 8))
            EGP:egpSetText(MusicData["TimeID", number], format("%02d:%02d", Time/60, Time%60))
            EGP:egpSetText(MusicData["LengthID", number], format("%02d:%02d", Length/60, Length%60))
        }
    }
}

event input(Input:string) {
    if (Input != "User") { exit() }
    for (I = 1, MusicData["MaxListed", number]) {
        local ButtonID = MusicData["bListID" + I, number]

        if (EGP:isButton(ButtonID) & !Down) {
            local Name = SongList[I + (Page - 1) * 10, array][2, string]
            local Url  = SongList[I + (Page - 1) * 10, array][1, string]

            if (MusicData["CurURL", string] & MusicData["CurURL", string] == Url) {
                EGP:egpColor(ButtonID, vec(255, 0, 0))
            } else {
                EGP:egpColor(ButtonID, vec(0, 255, 255))
                EGP:egpSetText(MusicData["NameID", number], Name)
                EGP:egpSetText(VolumeID, MusicData["Volume", number]:toString())
                EGP:egpColor(155, vec(255))
                EGP:egpColor(156, vec(255))

                MusicData["CurURL", string] = Url
                playSong(Url, MusicData["Volume", number], MusicData["Radius", number])
                MusicData["CurSong", number] = I + (Page - 1) * 10
                MusicData["Playing", number] = 1
            }

            timer("down" + I, Cooldown)
            Down = 1
        }

        if (clk("down" + I)) {
            EGP:egpColor(ButtonID, vec(255))
            Down = 0
        }
    }

    if (EGP:isButton(ProgBar) & !Down) {
        timer("down" + PrevPageID, Cooldown)
        Down = 1
        
        MusicData["tick", number] = MusicData["tick", number] - 0.3
        if (WebAudio:isValid()) {   
            local Time = EGP:egpPos(ProgBar):distance(EGP:egpCursor(User))/512 * Length
            MusicData["GetTime", number] = Time
            WebAudio:setTime(Time)
            WebAudio:update()
            if (MusicData["Playing", number]) {
                WebAudio:play()
            }
        }
    }
    elseif (EGP:isButton(PrevPageID) & !Down) {
        timer("down" + PrevPageID, Cooldown)
        Down = 1

        Page = Page - 1
        #Page = clamp(Page, 1, MaxPage)
        if (Page < 1) { Page = MaxPage }
        MusicData["CurPage", number] = Page
        EGP:egpColor(PrevPageID, vec(50))    
        pageChanged()
    }
    elseif (EGP:isButton(NextPageID) & !Down) {
        timer("down" + NextPageID, Cooldown)
        Down = 1

        Page = Page + 1
        #Page = clamp(Page, 1, MaxPage)
        if (Page > MaxPage) { Page = 1 }
        MusicData["CurPage", number] = Page
        EGP:egpColor(NextPageID, vec(50))
        pageChanged()
    }
    elseif (EGP:isButton(PrevSong) & !Down) {
        timer("down" + PrevSong, Cooldown)
        Down = 1

        local CurSong = MusicData["CurSong", number]
        CurSong = CurSong - 1
        MusicData["CurSong", number] = CurSong
        MusicData["CurSong", number] = clamp(MusicData["CurSong", number], 1, MusicData["MaxSong", number])

        local Name = SongList[MusicData["CurSong", number], array][2, string]
        local Url  = SongList[MusicData["CurSong", number], array][1, string]
        MusicData["CurURL", string] = Url

        EGP:egpColor(PrevSong, vec(50))
        EGP:egpSetText(MusicData["NameID", number], Name)
        playSong(Url, MusicData["Volume", number], MusicData["Radius", number])
    }
    elseif (EGP:isButton(NextSong) & !Down) {
        timer("down" + NextSong, Cooldown)
        Down = 1

        local CurSong = MusicData["CurSong", number]
        CurSong = CurSong + 1
        MusicData["CurSong", number] = CurSong
        MusicData["CurSong", number] = clamp(MusicData["CurSong", number], 1, MusicData["MaxSong", number])

        local Name = SongList[MusicData["CurSong", number], array][2, string]
        local Url  = SongList[MusicData["CurSong", number], array][1, string]
        MusicData["CurURL", string] = Url

        EGP:egpColor(NextSong, vec(50))
        EGP:egpSetText(MusicData["NameID", number], Name)
        playSong(Url, MusicData["Volume", number], MusicData["Radius", number])
    }
    elseif (EGP:isButton(PlayPaus) & !Down) {
        timer("down" + PlayPaus, Cooldown)
        Down = 1

        MusicData["Playing", number] = !MusicData["Playing", number]
        EGP:egpColor(PlayPaus, vec(50))

        if (WebAudio:isValid()) {
            if (MusicData["Playing", number]) {
                WebAudio:setTime(MusicData["GetTime", number])
                WebAudio:play()

                EGP:egpColor(155, vec(255))
                EGP:egpColor(156, vec(255))
            } else {
                MusicData["GetTime", number] = WebAudio:getTime()
                WebAudio:pause()

                EGP:egpColor(155, vec(255, 100, 0))
                EGP:egpColor(156, vec(255, 100, 0))
            }
        } else {
            EGP:egpColor(155, vec(255))
            EGP:egpColor(156, vec(255))
        }
    }
    elseif (EGP:isButton(VolumeUpID) & !Down) {
        timer("down" + VolumeUpID, Cooldown)
        Down = 1
        
        EGP:egpColor(VolumeUpID, vec(50))
        if (WebAudio:isValid()) {
            local Volume = MusicData["Volume", number]
            Volume += 10
            if (Volume > 200) { Volume = 200 }
            WebAudio:setVolume(Volume)
            WebAudio:update()
            MusicData["Volume", number] = Volume
            
            EGP:egpSetText(VolumeID, Volume:toString())
        }
    }
    elseif (EGP:isButton(VolumeDwID) & !Down) {
        timer("down" + VolumeDwID, Cooldown)
        Down = 1
        
        EGP:egpColor(VolumeDwID, vec(50))
        if (WebAudio:isValid()) {
            local Volume = MusicData["Volume", number]
            Volume -= 10
            if (Volume < 0) { Volume = 0 }
            WebAudio:setVolume(Volume)
            WebAudio:update()
            MusicData["Volume", number] = Volume
            
            EGP:egpSetText(VolumeID, Volume:toString())
        }
    }
}

if (clk("down" + PrevPageID)) {
    EGP:egpColor(PrevPageID, vec(255))
    Down = 0
}
elseif (clk("down" + NextPageID)) {
    EGP:egpColor(NextPageID, vec(255))
    Down = 0
}
elseif (clk("down" + PrevSong)) {
    EGP:egpColor(PrevSong, vec(255))
    EGP:egpColor(155, vec(255))
    EGP:egpColor(156, vec(255))
    Down = 0
}
elseif (clk("down" + NextSong)) {
    EGP:egpColor(NextSong, vec(255))
    EGP:egpColor(155, vec(255))
    EGP:egpColor(156, vec(255))
    Down = 0
}
elseif (clk("down" + PlayPaus)) {
    EGP:egpColor(PlayPaus, vec(255))
    Down = 0
}
elseif (clk("down" + VolumeUpID)) {
    EGP:egpColor(VolumeUpID, vec(255))
    Down = 0
}
elseif (clk("down" + VolumeDwID)) {
    EGP:egpColor(VolumeDwID, vec(255))
    Down = 0
}
for (I = 1, MusicData["MaxListed", number]) {
    local ButtonID = MusicData["bListID" + I, number]

    if (clk("down" + I)) {
        EGP:egpColor(ButtonID, vec(255))
        Down = 0
    }
}
